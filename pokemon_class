import csv
import random
from pokemon_attacks import *


class Pokemon:#a class that represent each pokemon
    def __init__(self, pokemon: list):
        global a
        self.num = self.__check_int(pokemon[0])
        self.Name = pokemon[1]
        self.Type_1 = self.check_type(pokemon[2])
        self.Type_2 = self.check_type(pokemon[3])
        self.Total = self.__check_int(pokemon[4])
        self.HP = self.__check_int(pokemon[5])
        self.Atk = self.__check_int(pokemon[6])
        self.Def = self.__check_int(pokemon[7])
        self.Sp_Atk = self.__check_int(pokemon[8])
        self.Sp_Def = self.__check_int(pokemon[9])
        self.Speed = self.__check_int(pokemon[10])
        self.attacks = a.pokemon_atc(self.Type_1,self.Total,self.Type_2) #self.attack_pool()
        # self.attacks = []
        self.Gen = self.__check_int(pokemon[11])
        self.Leg = pokemon[12]

    def check_type(self,type):#make sure that a pokemon has a type
        if type == None:
            return "no type"
        else:
            return type

    def __check_int(self, num):#converting the stats to int
        new_num = int(num)
        return new_num



    def print_attacks(self):
        back = ""
        key_list = list(self.attacks.keys())
        values_list = list(self.attacks.values())
        for i in range(0,len(key_list)):
            back+= "\n"+str(i+1)+"."+key_list[i]+"   "+str(values_list[i])

        return back



    def __str__(self):
        back = "Name: " + self.Name + "\n Type: " + self.Type_1 + " " + self.Type_2 + "\nattacks: "+str(self.attacks)
        return back

    def __repr__(self):
        return str(self)


class All_Pokemons:
    def __init__(self, name):
        self.pokemon_list = list()
        self.fire = list()




        with open(name) as csvfile:
            read = csv.reader(csvfile)
            next(read)
            for row in read:
                new_pokemon = Pokemon(row)
                self.pokemon_list.append(new_pokemon)

    def print_me(self):
        for row in self.pokemon_list:
            print(row)

    def check_name(self, name):
        new_name = str(name).title()
        for pokemon in self.pokemon_list:
            if pokemon.Name == new_name:
                return pokemon
    def pokemon_battle(self, pokemon1: Pokemon, pokemon2: Pokemon):
        if pokemon1.Total > pokemon2.Total:
            return print(self.print_pokmon(pokemon1) + "\nVS\n" + self.print_pokmon(
                pokemon2) + "\n and the winner is " + pokemon1.Name + "!!!!!")
        else:
            return print(self.print_pokmon(pokemon1) + "VS" + self.print_pokmon(
                pokemon2) + "\nand the winner is " + pokemon2.Name + "!!!!!")

    def print_pokmon(self,num):
        back = "no pokemons by this number"
        for pokemon in self.pokemon_list:
            if num == int(pokemon.num):
                back = pokemon.Name + "\n" + pokemon.Type_1 + " " + pokemon.Type_2 + "\n" + str(pokemon.Total)
        return print(back)

    def select_a_pokemon(self,num):
        for pokemon in self.pokemon_list:
            if num == pokemon.num:
                return pokemon


    def super_effective(self, p1:Pokemon, p2: Pokemon):
        if p1.Type_1 == "Fire" or p1.Type_2 == "Fire":
            if p2.Type_1 == "Water" or p2.Type_1 == "Ground" or p2.Type_1 == "Rock" or p2.Type_2 == "Water" or p2.Type_2 == "Ground" or p2.Type_2 == "Rock":
                for val in p2.attacks.keys():
                    p2.attacks[val] =int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Grass" or "Ice" or "BUG" or p2.Type_2 == "Grass" or p2.Type_2 == "Ice" or p2.Type_2 == "BUG":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
        else:
            pass

        if p1.Type_1 == "Water" or p1.Type_2 == "Water":
            if p2.Type_1 == "Grass" or p2.Type_1 == "Electric" or p2.Type_2 == "Grass" or p2.Type_2 == "Electric":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Fire" or p2.Type_1 == "Ground" or p2.Type_2 == "Fire" or p2.Type_2 == "Ground":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)

            else:
                pass

        if p1.Type_1 == "Grass" or p1.Type_2 == "Grass":
            if p2.Type_1 == "Fire" or p2.Type_2 == "Ice" or p2.Type_1 == "Poison" or p2.Type_1 == "Flying" or p2.Type_1 == "Bug" \
                    or p2.Type_2 == "Fire" or p2.Type_2 == "Ice" or p2.Type_2 == "Poison" or p2.Type_2 == "Bug":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Water" or p2.Type_1 == "Ground" or p2.Type_1 == "Rock" or p2.Type_2 == "Water" or \
                    p2.Type_2 == "Ground" or p2.Type_2 == "Rock":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
        else:
            pass

        if p1.Type_1 == "Normal" or p1.Type_2 == "Normal":
            if p2.Type_1 == "Fighting" or p2.Type_2 == "Fighting":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Fire" or p2.Type_1 == "Ground" or p2.Type_2 == "Fire" or p2.Type_2 == "Ground":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Ice" or p1.Type_2 == "Ice":
            if p2.Type_1 == "Fighting" or p2.Type_1 == "Fire" or p2.Type_1 == "Rock" or p2.Type_2 == "Fighting" \
                    or p2.Type_2 == "Fire" or p2.Type_2 == "Rock":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Grass" or p2.Type_1 == "Ground" or p2.Type_2 == "Flying" or p2.Type_1 == "Dragon" or \
                    p2.Type_2 == "Grass" or p2.Type_2 == "Ground" or p2.Type_2 == "Flying" or p2.Type_2 == "Dragon":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass
        if p1.Type_1 == "Electric" or p1.Type_2 == "Electric":
            if p2.Type_1 == "Ground" or p2.Type_2 == "Ground":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Water" or p2.Type_1 == "Flying" or p2.Type_2 == "Water" or p2.Type_2 == "Flying":
                for val in p1.attacks.values():
                    val *= 1.25
            else:
                pass

        if p1.Type_1 == "Poison" or p1.Type_2 == "Poison":
            if p2.Type_1 == "Ground" or p2.Type_1 == "Psychic" or p2.Type_2 == "Ground" or p2.Type_2 == "Psychic":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Grass" or p2.Type_2 == "Grass":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Ground" or p1.Type_2 == "Ground":
            if p2.Type_1 == "Water" or p2.Type_1 == "Grass" or p2.Type_1 == "Ice" or p2.Type_2 == "Water" or p2.Type_2 == "Grass" \
                    or p2.Type_2 == "Ice":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Fire" or p2.Type_1 == "Electric" or p2.Type_1 == "Poison" or p2.Type_2 == "Rock" or \
                    p2.Type_2 == "Fire" or p2.Type_2 == "Electric" or p2.Type_2 == "Poison" or p2.Type_2 == "Rock":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Flying" or p1.Type_2 == "Flying":
            if p2.Type_1 == "Electric" or p2.Type_1 == "Ice" or p2.Type_1 == "Rock" or \
                    p2.Type_2 == "Electric" or p2.Type_2 == "Ice" or p2.Type_2 == "Rock":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Grass" or p2.Type_1 == "Fighting" or p2.Type_1 == "Bug" or p2.Type_2 == "Grass" or \
                    p2.Type_2 == "Fighting" or p2.Type_2 == "Bug":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Psychic" or p1.Type_2 == "Psychic":
            if p2.Type_1 == "Bug" or p2.Type_1 == "Ghost" or p2.Type_2 == "Bug" or p2.Type_2 == "Ghost":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Fighting" or p2.Type_1 == "Poison" or p2.Type_2 == "Fighting" or p2.Type_2 == "Poison":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Bug" or p1.Type_2 == "Bug":
            if p2.Type_1 == "Fire" or p2.Type_1 == "Flying" or p2.Type_1 == "Rock" or p2.Type_2 \
                    == "Fire" or p2.Type_2 == "Flying" or p2.Type_2 == "Rock":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Grass" or p2.Type_1 == "Psychic" or p2.Type_2 == "Grass" or p2.Type_2 == "`Psychic":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Rock" or p1.Type_2 == "Rock":
            if p2.Type_1 == "Water" or p2.Type_1 == "Grass" or p2.Type_1 == "Fighting" or p2.Type_1 \
                    == "Ground" or p2.Type_2 == "Water" or p2.Type_2 == "Grass" or p2.Type_2 == "Fighting`" or p2.Type_2 \
                    == "Ground":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Fire" or p2.Type_1 == "Ice" or p2.Type_1 == "Flying" \
                    or p2.Type_1 == " Bug" or p2.Type_2 == "Fire" or p2.Type_2 == "Ice" or p2.Type_2 == "`Flying" \
                    or p2.Type_2 == "Bug":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Ghost" or p1.Type_2 == "Ghost":
            if p2.Type_1 == "Ghost" or p2.Type_2 == "Ghost":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Ghost" or p2.Type_1 == "Psychic" or p2.Type_2 == "Ghost" or p2.Type_2 == "`Psychic":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)
            else:
                pass

        if p1.Type_1 == "Dragon" or p1.Type_2 == "Dragon":
            if p2.Type_1 == "Dragon" or p2.Type_1 == "Ice" or p2.Type_2 \
                    == "Dragon" or p2.Type_2 == "Ice":
                for val in p2.attacks.keys():
                    p2.attacks[val] = int(p2.attacks[val]*1.25)

            elif p2.Type_1 == "Dragon" or p2.Type_2 == "Dragon":
                for val in p1.attacks.keys():
                    p1.attacks[val] = int(p1.attacks[val]*1.25)

            else:
                pass

        return p1, p2

a = Attack_Type()



# if __name__ == '__main__':
#     pokemon_list1 = All_Pokemons("pokemon_list.csv")
#     pokemon_list1.print_me()
#     player_1 = random.choice(pokemon_list1.pokemon_list)
#     step_1 = pokemon_list1.check_name(player_1)
#     pokemon_list1.print_me()
#     player_2 = input("Ok now it's your turn to choose a pokemon :")
#     step_2 = pokemon_list1.check_name(player_2)
#     battle = pokemon_list1.super_effective(step_1, step_2)
#     print(pokemon_list1.pokemon_battle(battle[0], battle[1]))


# all_pokemons = All_Pokemons("pokemon_list.csv")
# psd = all_pokemons.select_a_pokemon(100)
# list1 = list(psd.attacks.keys())
# print(list1)
# # a = Attack_Type("Attack List.csv")
# all_pokemons.print_pokmon(66)
# a = pokemon_attacks.Attack_Type("Attack List.csv")
# for p in all_pokemons.pokemon_list:
#     if p.Type_1 == "Fire" and int(p.Total)<=350:
#         a.pokemon_atc(p)
#         print(p)
